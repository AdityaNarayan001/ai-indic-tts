import subprocess

def synthesize_text(text, speaker_idx):
    # Define the paths for configuration and model files
    config_path = "/Users/aditya.narayan/Desktop/speechToSpeech/indic-tts/models/v1/kn/fastpitch/config.json"
    model_path = "/Users/aditya.narayan/Desktop/speechToSpeech/indic-tts/models/v1/kn/fastpitch/best_model.pth"
    out_path = "/Users/aditya.narayan/Desktop/speechToSpeech/indic-tts/output.wav"
    vocoder_path = "/Users/aditya.narayan/Desktop/speechToSpeech/indic-tts/models/v1/kn/hifigan/best_model.pth"
    vocoder_config_path = "/Users/aditya.narayan/Desktop/speechToSpeech/indic-tts/models/v1/kn/hifigan/config.json"

    # Create the command
    command = [
        "tts",
        "--text", text,
        "--config_path", config_path,
        "--model_path", model_path,
        "--out_path", out_path,
        "--vocoder_path", vocoder_path,
        "--vocoder_config_path", vocoder_config_path,
        "--speaker_idx", str(speaker_idx)  # Convert speaker_idx to string if necessary
    ]

    # Execute the command
    result = subprocess.run(command, capture_output=True, text=True)

    # Print the output and errors (if any)
    # print("Output:", result.stdout)
    # print("Error:", result.stderr)
    # print('---->',result)
    
    print("üü¢ Speech Generated")

if __name__ == "__main__":
    text_to_synthesize = """‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞! ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤®‡≤Æ‡≤Ø‡≤æ‡≤§‡≥ç‡≤∞‡≤ø ‡≤Ü‡≤™‡≥ç ‡≤ï‡≤æ‡≤∞‡≥ç‡≤Ø ‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤π‡≤£‡≥Ü ‡≤Æ‡≤æ‡≤°‡≥Å‡≤µ‡≥Å‡≤¶‡≤ø‡≤≤‡≥ç‡≤≤ ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤§‡≤ø‡≤≥‡≤ø‡≤¶‡≥Å ‡≤∏‡≤Ç‡≤§‡≥ã‡≤∑‡≤µ‡≤æ‡≤Ø‡≤ø‡≤§‡≥Å. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤ï‡≥Ü‡≤≥‡≤ó‡≤ø‡≤® ‡≤∏‡≤≤‡≤π‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø:
‡≤Ü‡≤™‡≥ç‚Äå ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤Æ‡≤∞‡≥Å‡≤æ‡≤∞‡≤Ç‡≤≠‡≤ø‡≤∏‡≤ø, ‡≤Ü‡≤™‡≥ç‚Äå ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≤Ç‡≤™‡≥Ç‡≤∞‡≥ç‡≤£‡≤µ‡≤æ‡≤ó‡≤ø ‡≤Æ‡≥Å‡≤ö‡≥ç‡≤ö‡≤ø, ‡≤®‡≤Ç‡≤§‡≤∞ ‡≤Æ‡≤§‡≥ç‡≤§‡≥Ü ‡≤§‡≥Ü‡≤∞‡≥Ü‡≤¶‡≥Å‡≤ï‡≥ä‡≤≥‡≥ç‡≤≥‡≤ø.
‡≤à ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ó‡≤≥‡≤≤‡≥ç‡≤≤‡≤ø ‡≤Ø‡≤æ‡≤µ‡≥Å‡≤¶‡≥á ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤¨‡≥á‡≤ï‡≤æ‡≤¶‡≤∞‡≥Ü ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤á‡≤®‡≥ç‡≤®‡≤∑‡≥ç‡≤ü‡≥Å ‡≤µ‡≤ø‡≤µ‡≤∞ ‡≤¨‡≥á‡≤ï‡≤æ‡≤¶‡≤∞‡≥Ü ‡≤§‡≤ø‡≤≥‡≤ø‡≤∏‡≤ø!"""
    speaker_index = "female"
    synthesize_text(text_to_synthesize, speaker_index)
